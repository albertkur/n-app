import * as ts from "typescript";
import { LoaderContext } from "webpack";
export declare const declarationCompileConfig: {
    module: ts.ModuleKind;
    moduleResolution: ts.ModuleResolutionKind;
    target: ts.ScriptTarget;
    emitDeclarationOnly: boolean;
    declaration: boolean;
    strict: boolean;
    strictNullChecks: boolean;
    strictFunctionTypes: boolean;
    noImplicitAny: boolean;
    noImplicitThis: boolean;
    noImplicitReturns: boolean;
    noUnusedLocals: boolean;
    noUnusedParameters: boolean;
    noFallthroughCasesInSwitch: boolean;
    noEmitOnError: boolean;
    sourceMap: boolean;
    experimentalDecorators: boolean;
    emitDecoratorMetadata: boolean;
    removeComments: boolean;
    forceConsistentCasingInFileNames: boolean;
    incremental: boolean;
    skipLibCheck: boolean;
    importHelpers: boolean;
    noEmitHelpers: boolean;
    noImplicitOverride: boolean;
    pretty: boolean;
};
export declare const combinedCompileConfig: {
    module: ts.ModuleKind;
    moduleResolution: ts.ModuleResolutionKind;
    target: ts.ScriptTarget;
    strict: boolean;
    strictNullChecks: boolean;
    strictFunctionTypes: boolean;
    noImplicitAny: boolean;
    noImplicitThis: boolean;
    noImplicitReturns: boolean;
    noUnusedLocals: boolean;
    noUnusedParameters: boolean;
    noFallthroughCasesInSwitch: boolean;
    noEmitOnError: boolean;
    noEmit: boolean;
    sourceMap: boolean;
    experimentalDecorators: boolean;
    emitDecoratorMetadata: boolean;
    removeComments: boolean;
    forceConsistentCasingInFileNames: boolean;
    incremental: boolean;
    skipLibCheck: boolean;
    importHelpers: boolean;
    noEmitHelpers: boolean;
    noImplicitOverride: boolean;
    pretty: boolean;
};
export declare function compile(isDebug: boolean, debugFiles: ReadonlyArray<string>, fileNames: ReadonlyArray<string>, options: ts.CompilerOptions, loaderContext: LoaderContext<any>, isView?: boolean): void;
